@page "/theachers/edit"
@using Microsoft.EntityFrameworkCore
@using BlazorAcademy.Models
@inject IDbContextFactory<BlazorAcademy.Data.BlazorAcademyContext> DbFactory
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Theacher</h2>
<hr />
@if (Theacher is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Theacher" OnValidSubmit="UpdateTheacher" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Theacher.teacher_id" value="@Theacher.teacher_id" />
                <div class="mb-3">
                    <label for="work_since" class="form-label">work_since:</label>
                    <InputDate id="work_since" @bind-Value="Theacher.work_since" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => Theacher.work_since" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="rate" class="form-label">rate:</label>
                    <InputNumber id="rate" @bind-Value="Theacher.rate" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => Theacher.rate" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="last_name" class="form-label">last_name:</label>
                    <InputText id="last_name" @bind-Value="Theacher.last_name" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => Theacher.last_name" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="first_name" class="form-label">first_name:</label>
                    <InputText id="first_name" @bind-Value="Theacher.first_name" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => Theacher.first_name" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="midle_name" class="form-label">midle_name:</label>
                    <InputText id="midle_name" @bind-Value="Theacher.middle_name" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => Theacher.middle_name" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="birth_date" class="form-label">birth_date:</label>
                    <InputDate id="birth_date" @bind-Value="Theacher.birth_date" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => Theacher.birth_date" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="email" class="form-label">email:</label>
                    <InputText id="email" @bind-Value="Theacher.email" class="form-control" />
                    <ValidationMessage For="() => Theacher.email" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="phone" class="form-label">phone:</label>
                    <InputText id="phone" @bind-Value="Theacher.phone" class="form-control" />
                    <ValidationMessage For="() => Theacher.phone" class="text-danger" />
                </div>
                @* <div class="mb-3">
                    <label for="photo" class="form-label">photo:</label>
                    <InputText id="photo" @bind-Value="Theacher.photo" class="form-control" />
                    <ValidationMessage For="() => Theacher.photo" class="text-danger" />
                </div> *@
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/theachers">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int teacher_id { get; set; }

    [SupplyParameterFromForm]
    private Teacher? Theacher { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Theacher ??= await context.Teachers.FirstOrDefaultAsync(m => m.teacher_id == teacher_id);

        if (Theacher is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateTheacher()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Theacher!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!TheacherExists(Theacher!.teacher_id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/theachers");
    }

    private bool TheacherExists(int teacher_id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Teachers.Any(e => e.teacher_id == teacher_id);
    }
}
